plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id 'org.sonarqube' version '4.4.1.3373'
}

group = 'com.wex.challenge'
version = '0.0.1-SNAPSHOT'
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2025.0.0")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	runtimeOnly 'com.h2database:h2'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.11"
}

tasks.jacocoTestReport {
	dependsOn tasks.test
	reports {
		xml.required = true
		csv.required = false
		html.required = true
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'com/wex/challenge/PurchaseTransactionApplication.class',
					'**/config/**',
					'**/dto/**',
					'**/exception/**',
					'**/adapter/persistence/PurchaseJpaEntity.class'
			])
		}))
	}
}

tasks.named('jacocoTestCoverageVerification', JacocoCoverageVerification) {
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.70
			}
		}
	}
	dependsOn tasks.jacocoTestReport
	group = "verification"
}

sonarqube {
	properties {
		property "sonar.java.jacoco.reportPaths", "${layout.buildDirectory.file('jacoco/test.exec').asFile}"
		property "sonar.coverage.jacoco.xmlReportPaths", "${layout.buildDirectory.dir('reports/jacoco/test/jacocoTestReport.xml').asFile}"
		property "sonar.exclusions", "**/*Test.java, **/test/**/*"
		property "sonar.projectBaseDir", "${projectDir}"
	}
}

tasks.sonarqube {
	dependsOn tasks.jacocoTestReport
}
